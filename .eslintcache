[{"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\index.tsx":"1","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\App.tsx":"2","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\context\\RouteContext.tsx":"3","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Header\\Header.tsx":"4","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\pages\\SchedulePage.tsx":"5","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Header\\HeaderElements.tsx":"6","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Autocomplete\\Autocomplete.tsx":"7","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useItinerary.tsx":"8","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Tab\\Tab.tsx":"9","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\index.js":"10","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useAutocomplete.tsx":"11","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useCoords.tsx":"12","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\styleHooks\\useStyle.tsx":"13","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\Map.js":"14","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Tab\\TabPanel.tsx":"15","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Stops\\Stops.tsx":"16","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\CircleMarkerEl.tsx":"17","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\GetCurrentCoords.tsx":"18","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Itinerary\\Itinerary.tsx":"19","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\LegPath.tsx":"20","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Leg\\Leg.js":"21","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\helpers\\helpers.tsx":"22","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Itinerary\\ItineraryElements.tsx":"23","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Leg\\LegElements.tsx":"24","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\StopAutocomplete\\StopAutocomplete.tsx":"25","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useStopsAutocomplete.tsx":"26","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\PointSelection.tsx":"27","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Drawer\\Drawer.tsx":"28","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\TimeLine\\LegTimeline.tsx":"29"},{"size":219,"mtime":1609161738357,"results":"30","hashOfConfig":"31"},{"size":1083,"mtime":1610387493651,"results":"32","hashOfConfig":"31"},{"size":1407,"mtime":1610216058418,"results":"33","hashOfConfig":"31"},{"size":550,"mtime":1610388473621,"results":"34","hashOfConfig":"31"},{"size":2186,"mtime":1610387302723,"results":"35","hashOfConfig":"31"},{"size":2102,"mtime":1608913621879,"results":"36","hashOfConfig":"31"},{"size":2502,"mtime":1610109190372,"results":"37","hashOfConfig":"31"},{"size":1777,"mtime":1610302350297,"results":"38","hashOfConfig":"31"},{"size":1159,"mtime":1610355254189,"results":"39","hashOfConfig":"31"},{"size":469,"mtime":1610387783664,"results":"40","hashOfConfig":"31"},{"size":863,"mtime":1609874822407,"results":"41","hashOfConfig":"31"},{"size":838,"mtime":1610103254461,"results":"42","hashOfConfig":"31"},{"size":1797,"mtime":1610373415351,"results":"43","hashOfConfig":"31"},{"size":1452,"mtime":1610190704429,"results":"44","hashOfConfig":"31"},{"size":611,"mtime":1609936067728,"results":"45","hashOfConfig":"31"},{"size":1388,"mtime":1609779750509,"results":"46","hashOfConfig":"31"},{"size":939,"mtime":1610389249653,"results":"47","hashOfConfig":"31"},{"size":1934,"mtime":1610389472776,"results":"48","hashOfConfig":"31"},{"size":2456,"mtime":1609695984818,"results":"49","hashOfConfig":"31"},{"size":3566,"mtime":1610216246993,"results":"50","hashOfConfig":"31"},{"size":1535,"mtime":1610388903441,"results":"51","hashOfConfig":"31"},{"size":1706,"mtime":1610384067538,"results":"52","hashOfConfig":"31"},{"size":1122,"mtime":1610387282261,"results":"53","hashOfConfig":"31"},{"size":3092,"mtime":1609866528235,"results":"54","hashOfConfig":"31"},{"size":2198,"mtime":1610389576699,"results":"55","hashOfConfig":"31"},{"size":407,"mtime":1610389894995,"results":"56","hashOfConfig":"31"},{"size":2120,"mtime":1610124902986,"results":"57","hashOfConfig":"31"},{"size":905,"mtime":1610355604647,"results":"58","hashOfConfig":"31"},{"size":2870,"mtime":1610384008930,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"nfe6tj",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\index.tsx",[],["126","127"],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\App.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\context\\RouteContext.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Header\\Header.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\pages\\SchedulePage.tsx",["128"],"import { useContext } from 'react';\r\nimport InputAutocomplete from '../components/Autocomplete/Autocomplete'\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Itinerary } from '../components'\r\nimport { useItinerary } from '../hooks/useItinerary'\r\nimport { ItinerariesWrapper } from '../components/Itineraries/Itinerary/ItineraryElements'\r\nimport { RouteContext } from '../context/RouteContext';\r\nimport Tab from '../components/Tab/Tab'\r\nimport Drawer from '../components/Drawer/Drawer'\r\n\r\nconst useButtonStyle = makeStyles({\r\n    root: { marginTop: '1rem' }\r\n})\r\n\r\nexport default function SchedulePage() {\r\n    const classes = useButtonStyle();\r\n    const { formData, displayDrawer } = useContext(RouteContext)\r\n    const [fetchItinerary, { loading, data }] = useItinerary()\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"map-wrapper\">\r\n                <div className=\"left\">\r\n                    <InputAutocomplete id='origin' />\r\n                    <InputAutocomplete id='destination' />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disableElevation\r\n                        classes={{ root: classes.root }}\r\n                        onClick={() => formData?.origin && formData?.destination && fetchItinerary()}\r\n                    >\r\n                        Search routes\r\n                    </Button>\r\n                    {loading\r\n                        ? 'Loading...'\r\n                        : data &&\r\n                        <ItinerariesWrapper>\r\n                            {data?.plan.itineraries.map((itinerary: any, idx: number) =>\r\n                                <Itinerary key={idx} itinerary={itinerary} />)}\r\n                        </ItinerariesWrapper>\r\n                    }\r\n                </div>\r\n                <div className=\"right\">\r\n                    <div className=\"upper-right\">\r\n                        <Tab />\r\n                    </div>\r\n                    {/* <Map /> */}\r\n                </div>\r\n                <Drawer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Header\\HeaderElements.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Autocomplete\\Autocomplete.tsx",["129"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { useAutocomplete } from '../../hooks/useAutocomplete'\r\nimport { useCoords } from '../../hooks/useCoords';\r\nimport { useAutocompleteStyle } from '../../styleHooks/useStyle'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { RouteContext } from '../../context/RouteContext';\r\n\r\n\r\n\r\ninterface ILocation {\r\n    label: string;\r\n}\r\n\r\ninterface PropTypes {\r\n    id: string\r\n}\r\n\r\nexport default function InputAutocomplete({ id }: PropTypes) {\r\n    const [term, setTerm] = useState('')\r\n    const [doFetch, setDoFetch] = useState(false)\r\n    const { setFormData, formData, coords } = useContext(RouteContext)\r\n    const classes = useAutocompleteStyle();\r\n\r\n    const { data: suggestions = [] } = useAutocomplete(doFetch, term)\r\n    const { data: currentCoordsLocation } = useCoords(coords?.coords)\r\n    \r\n    useEffect(() => {\r\n        if (currentCoordsLocation && coords?.id === id) {\r\n            setTerm(currentCoordsLocation?.label)\r\n            setFormData({ ...formData, [id]: currentCoordsLocation })\r\n        }\r\n    }, [currentCoordsLocation])\r\n\r\n    useEffect(() => {\r\n        term.length && setDoFetch(true)\r\n    }, [term])\r\n\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Autocomplete\r\n                freeSolo\r\n                fullWidth\r\n                selectOnFocus\r\n                blurOnSelect\r\n                classes={{ input: classes.input, noOptions: classes.noOptions, option: classes.option }}\r\n                noOptionsText='Type to get locations'\r\n                onChange={(_, value) => setFormData({\r\n                    ...formData,\r\n                    [id]: suggestions.find((suggestion: ILocation) => suggestion.label === value)\r\n                })\r\n                }\r\n                onInputChange={(_, inputValue) => setTerm(inputValue)}\r\n                value={term}\r\n                options={suggestions && suggestions.map((suggestion: ILocation) => suggestion.label)}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label={id === 'origin' ? 'Select origin' : 'Select destination'}\r\n                        size='small'\r\n                        required\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useItinerary.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Tab\\Tab.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\index.js",[],["130","131"],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useAutocomplete.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useCoords.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\styleHooks\\useStyle.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\Map.js",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Tab\\TabPanel.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Stops\\Stops.tsx",["132","133"],"import { useState } from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport StopAutocomplete from '../StopAutocomplete/StopAutocomplete'\r\nimport Box from '@material-ui/core/Box'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { IStop } from '../../interfaces/Interfaces'\r\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\r\n\r\n\r\nexport default function SimpleContainer() {\r\n  const [stop, setStop] = useState<IStop>()\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"sm\">\r\n        <Box p={2} display='flex' flexDirection='column' alignItems='center'>\r\n          <StopAutocomplete id='Select stop' setStop={setStop} />\r\n        </Box>\r\n        {stop &&\r\n          <Grid container direction='row' justify='space-between' alignItems='center'>\r\n            <Typography variant='subtitle2'>GTFS ID: {stop?.gtfsId}</Typography>\r\n            <Typography variant='subtitle2'>Stop Location: {stop?.desc}</Typography>\r\n            <Typography variant='subtitle2'>Zone: {stop?.zoneId}</Typography>\r\n            <Typography variant='subtitle2'>Latitude: {stop?.lat}</Typography>\r\n            <Typography variant='subtitle2'>Longitude: {stop?.lon}</Typography>\r\n          </Grid>\r\n        }\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\CircleMarkerEl.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\GetCurrentCoords.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Itinerary\\Itinerary.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\LegPath.tsx",["134","135","136","137","138"],"import { useState, useEffect, useContext } from 'react'\r\nimport { Polyline, Tooltip, Rectangle, useMap, Polygon, Marker } from \"react-leaflet\";\r\nimport L from 'leaflet';\r\nimport { Alert } from '@material-ui/lab'\r\nimport CircleMarkerEl from '../Map/CircleMarkerEl'\r\nimport { setColor, defineColor } from '../../helpers/helpers'\r\nimport { defineIcon } from '../Itineraries/Leg/LegElements'\r\nimport { RouteContext } from '../../context/RouteContext'\r\n\r\n\r\nconst PolygonWithText = (props: any) => {\r\n    const icon = L.divIcon({\r\n        className: 'rectangle-icon',\r\n        html: `<div>${props.route}</div>`\r\n    })\r\n\r\n    return (\r\n        //   <Rectangle bounds={props.coords} pathOptions={props.color} fillOpacity={1} weight={500}>\r\n        <Marker position={props.center} icon={icon} />\r\n        //   </Rectangle>\r\n    )\r\n}\r\n\r\n\r\nexport default function LegPath({ selectedLeg }: any) {\r\n    const [startPoints, setStartPoints] = useState<any>([60.19, 24.94])\r\n    const [endPoints, setEndPoints] = useState<any>([60.19, 24.94])\r\n    const [points, setPoints] = useState([])\r\n    const [bounds, setBounds] = useState<any>([[60.19, 24.94], [60.19, 24.94]])\r\n    const [center, setCenter] = useState<any>([60.19, 24.94])\r\n    const [pathColor, setPathColor] = useState({})\r\n    const { displayDrawer, setDisplayDrawer } = useContext(RouteContext)\r\n\r\n    const map = useMap()\r\n\r\n    useEffect(() => {\r\n        map.fitBounds([startPoints, endPoints])\r\n    }, [startPoints, endPoints])\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedLeg) {\r\n            setColor(selectedLeg?.mode, setPathColor)\r\n\r\n            const points = selectedLeg?.legGeometry.points\r\n            setStartPoints(points[0])\r\n            setEndPoints(points[points.length - 1])\r\n            setPoints(points)\r\n            const northWestLat = points[Math.round(points.length / 2)][0] - .0016\r\n            const northWestLon = points[Math.round(points.length / 2)][1] - .005\r\n            const southEastLat = points[Math.round(points.length / 2)][0] + .001\r\n            const southEastLon = points[Math.round(points.length / 2)][1] + .007\r\n            setBounds([[northWestLat, northWestLon], [northWestLat, northWestLon]])\r\n            setCenter(points[Math.round(points.length / 2)])\r\n            // setBounds([points[Math.round(points.length/2)], points[Math.round(points.length/2) - 10]])\r\n        }\r\n    }, [selectedLeg])\r\n\r\n    return (\r\n        <>\r\n            <CircleMarkerEl coords={startPoints} type='departure' color={pathColor} />\r\n            <CircleMarkerEl coords={endPoints} type='arrival' color={pathColor} />\r\n            <PolygonWithText\r\n                mode={selectedLeg?.mode} route={selectedLeg?.trip?.routeShortName} coords={bounds} center={center} color={pathColor} />\r\n            {/* <Rectangle bounds={bounds} pathOptions={pathColor} fillOpacity={1} /> */}\r\n            <Polyline weight={4} smoothFactor={1} pathOptions={pathColor} positions={points}>\r\n                {selectedLeg && <Tooltip>{selectedLeg?.trip?.routeShortName}</Tooltip>}\r\n            </Polyline>\r\n            <div className='leg-info'>\r\n                <Alert\r\n                    style={{ backgroundColor: defineColor(selectedLeg.mode) }}\r\n                    icon={defineIcon(selectedLeg.mode)}\r\n                    variant=\"filled\"\r\n                    severity=\"info\"\r\n                    onClick={() => setDisplayDrawer(!displayDrawer)}\r\n                >\r\n                    {selectedLeg.mode} {selectedLeg.trip.routeShortName}\r\n                </Alert>\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Leg\\Leg.js",["139","140","141","142","143","144","145","146"],"import { useContext, useState } from 'react'\r\nimport { RouteContext } from '../../../context/RouteContext';\r\nimport { convertDuration, convertTime, getMinutes, defineWidth } from '../../../helpers/helpers'\r\nimport { LegWrapper, LegStripe, Departure, defineIcon } from './LegElements'\r\nvar polyline = require('@mapbox/polyline');\r\n\r\nconst Leg = ({ width, mode, routeName, leg}) => {\r\n    const [displayInfo, setDisplayInfo] = useState(false)\r\n\r\n    const { setSelectedLeg } = useContext(RouteContext)\r\n\r\n    const handleClick = () => {\r\n        if (leg) {\r\n            setSelectedLeg({\r\n                ...leg,\r\n                legGeometry: {\r\n                    points: polyline.decode(leg.legGeometry.points)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <> {mode === 'WALK' || mode === 'WAIT' && width < 5\r\n            ? null\r\n            : <LegWrapper width={width} onClick={handleClick} onMouseEnter={() => setDisplayInfo(true)} onMouseLeave={() => setDisplayInfo(false)}>\r\n                <LegStripe mode={mode}>\r\n                    {defineIcon(mode)}\r\n                    <span>{width > 5 && routeName} {mode === 'WAIT' && 'min'}</span>\r\n                </LegStripe>\r\n                {/* <Departure>\r\n                    {mode !== 'WAIT' && mode !== 'WALK' && <p><span>{convertTime(leg.startTime)}</span> {leg.from.name}</p>}\r\n                </Departure> */}\r\n                {/* {displayInfo && <Info leg={leg} />} */}\r\n            </LegWrapper>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leg\r\n","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\helpers\\helpers.tsx",["147"],"export function convertDuration(duration: number) {\r\n    let num = duration\r\n    let minutes = num / 60\r\n    let rminutes = Math.floor(minutes)\r\n    return rminutes\r\n}\r\n\r\nexport function convertTime(timestamp: Date) {\r\n    const date = new Date(timestamp)\r\n    const hours = ('0' + date.getHours()).substr(-2)\r\n    const minutes = ('0' + date.getMinutes()).substr(-2)\r\n\r\n    return hours + ':' + minutes\r\n}\r\n\r\nexport function getMinutes(startTimestamp: Date, endTimestamp: Date) {\r\n    const startDate = new Date(startTimestamp)\r\n    const endDate = new Date(endTimestamp)\r\n\r\n    const diff = endDate.getTime() - startDate.getTime()\r\n    return Math.round(diff / 60000)\r\n}\r\n\r\nexport function defineWidth(startTime: Date, endTime: Date, duration: number) {\r\n    return Math.round((getMinutes(startTime, endTime) * 100) / convertDuration(duration))\r\n}\r\n\r\n\r\nexport function setColor(mode: string, fn: ({}) => void) {\r\n    switch (mode) {\r\n        case 'BUS':\r\n            fn({ color: '#007AC9' })\r\n            break;\r\n\r\n        case 'TRAM':\r\n            fn({ color: '#00985F' })\r\n            break;\r\n\r\n        case 'RAIL':\r\n            fn({ color: '#8C4799' })\r\n            break;\r\n\r\n        case 'SUBWAY':\r\n            fn({ color: '#FF6319' })\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport function defineColor(mode: string) {\r\n    return mode === 'BUS'\r\n        ? '#007AC9'\r\n        : mode === 'TRAM'\r\n            ? '#00985F'\r\n            : mode === 'RAIL'\r\n                ? '#8C4799'\r\n                : mode === 'SUBWAY'\r\n                    ? '#FF6319'\r\n                    : mode === 'WAIT'\r\n                        ? '#fff'\r\n                        : 'lightgrey';\r\n}\r\n","C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Itinerary\\ItineraryElements.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Itineraries\\Leg\\LegElements.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\StopAutocomplete\\StopAutocomplete.tsx",["148","149","150","151"],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\hooks\\useStopsAutocomplete.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Map\\PointSelection.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\Drawer\\Drawer.tsx",[],"C:\\Projects\\Tutorials\\REACT\\helsinki_transport_material_ui\\frontend\\src\\components\\TimeLine\\LegTimeline.tsx",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":18,"column":23,"nodeType":"158","messageId":"159","endLine":18,"endColumn":36},{"ruleId":"160","severity":1,"message":"161","line":33,"column":8,"nodeType":"162","endLine":33,"endColumn":31,"suggestions":"163"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"164","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":13},{"ruleId":"156","severity":1,"message":"165","line":9,"column":16,"nodeType":"158","messageId":"159","endLine":9,"endColumn":27},{"ruleId":"156","severity":1,"message":"166","line":2,"column":29,"nodeType":"158","messageId":"159","endLine":2,"endColumn":38},{"ruleId":"156","severity":1,"message":"167","line":2,"column":48,"nodeType":"158","messageId":"159","endLine":2,"endColumn":55},{"ruleId":"160","severity":1,"message":"168","line":38,"column":8,"nodeType":"162","endLine":38,"endColumn":32,"suggestions":"169"},{"ruleId":"156","severity":1,"message":"170","line":51,"column":19,"nodeType":"158","messageId":"159","endLine":51,"endColumn":31},{"ruleId":"156","severity":1,"message":"171","line":52,"column":19,"nodeType":"158","messageId":"159","endLine":52,"endColumn":31},{"ruleId":"172","severity":1,"message":"173","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":25},{"ruleId":"172","severity":1,"message":"174","line":3,"column":27,"nodeType":"158","messageId":"159","endLine":3,"endColumn":38},{"ruleId":"172","severity":1,"message":"175","line":3,"column":40,"nodeType":"158","messageId":"159","endLine":3,"endColumn":50},{"ruleId":"172","severity":1,"message":"176","line":3,"column":52,"nodeType":"158","messageId":"159","endLine":3,"endColumn":63},{"ruleId":"172","severity":1,"message":"177","line":4,"column":33,"nodeType":"158","messageId":"159","endLine":4,"endColumn":42},{"ruleId":"172","severity":1,"message":"178","line":8,"column":12,"nodeType":"158","messageId":"159","endLine":8,"endColumn":23},{"ruleId":"179","severity":1,"message":"180","line":24,"column":29,"nodeType":"181","messageId":"182","endLine":24,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":24,"column":48,"nodeType":"181","messageId":"182","endLine":24,"endColumn":50},{"ruleId":"183","severity":1,"message":"184","line":29,"column":45,"nodeType":"185","messageId":"186","endLine":29,"endColumn":47},{"ruleId":"156","severity":1,"message":"187","line":1,"column":38,"nodeType":"158","messageId":"159","endLine":1,"endColumn":48},{"ruleId":"156","severity":1,"message":"188","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":25},{"ruleId":"156","severity":1,"message":"189","line":6,"column":10,"nodeType":"158","messageId":"159","endLine":6,"endColumn":22},{"ruleId":"156","severity":1,"message":"190","line":25,"column":11,"nodeType":"158","messageId":"159","endLine":25,"endColumn":20},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"@typescript-eslint/no-unused-vars","'displayDrawer' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coords?.id', 'formData', 'id', and 'setFormData'. Either include them or remove the dependency array.","ArrayExpression",["193"],"'Paper' is defined but never used.","'GridSpacing' is defined but never used.","'Rectangle' is defined but never used.","'Polygon' is defined but never used.","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["194"],"'southEastLat' is assigned a value but never used.","'southEastLon' is assigned a value but never used.","no-unused-vars","'convertDuration' is defined but never used.","'convertTime' is defined but never used.","'getMinutes' is defined but never used.","'defineWidth' is defined but never used.","'Departure' is defined but never used.","'displayInfo' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'useContext' is defined but never used.","'useAutocomplete' is defined but never used.","'RouteContext' is defined but never used.","'ILocation' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [coords?.id, currentCoordsLocation, formData, id, setFormData]",{"range":"199","text":"200"},"Update the dependencies array to be: [startPoints, endPoints, map]",{"range":"201","text":"202"},[1162,1185],"[coords?.id, currentCoordsLocation, formData, id, setFormData]",[1454,1478],"[startPoints, endPoints, map]"]